@namespace easy_blazor_bulma
@typeparam TValue
@inherits InputBase<TValue>

<div class="datetimepicker-parent">
    <input type="text" class="@MainCssClass" value='@CurrentValueAsString' onfocusin="this.select();"
        @onchange='OnChange'
        @onclick='OpenPopout'
        @onfocus='OpenPopout'
        @onkeydown='CheckKeyPress'
        @ref=Element
        @attributes='AdditionalAttributes.GetFilteredAttributes(Filter)' />

    @if (string.IsNullOrWhiteSpace(Icon) == false)
    {
        <span class="@IconCssClass">@Icon</span>
    }

    @if (Options.HasFlag(InputDateTimeOptions.ShowResetButton) && AdditionalAttributes.IsDisabled() == false)
    {
        <span class="material-icons icon is-right is-clickable" @onclick='() => ClosePopout(clear: true)' @onclick:stopPropagation="true">
            close
        </span>
    }

    <div class='@TimePickerCssClass'>
        @if (Options.HasFlag(InputDateTimeOptions.ClickPopout))
        {
            <div class="datetimepicker-background" @onclick='() => ClosePopout()'></div>
        }

        @if (Options.HasFlag(InputDateTimeOptions.ShowDate))
        {
            <div class="datetimepicker-container">
                <div class="datetimepicker-header">
                    <div class="datetimepicker-selection-start is-centered">
                        <div class="datetimepicker-selection-wrapper">
                            @if (IsNullable && CurrentValue == null)
                            {
                                <div class="datetimepicker-selection-day">-</div>
                                <div class="datetimepicker-selection-date">-</div>
                            }
                            else
                            {
                                <div class="datetimepicker-selection-day">@ValueAsDateTime.ToString("dd")</div>
                                <div class="datetimepicker-selection-date">
                                    <span>@ValueAsDateTime.ToString("MMMM yyyy")</span>
                                    <span>@ValueAsDateTime.ToString("dddd")</span>
                                </div>
                            }
                        </div>
                        <div class="datetimepicker-selection-time">
                            <div class="datetimepicker-selection-time-icon">
                                <span class="material-icons">schedule</span>
                            </div>
                            <div class="datetimepicker-selection-hour">
                                @if (IsNullable && CurrentValue == null)
                                {
                                    <span>-</span>
                                }
                                else
                                {
                                    <span>@ValueAsDateTime.ToString("t")</span>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="datepicker-nav">
                    <button type="button" class="button is-small is-rounded" @onclick='() => UpdatePopoutValue(false)' disabled='@(DisplayMode != PopoutDisplayMode.Calendar)'>
                        <span class="material-icons icon">arrow_back</span>
                    </button>
                    <div>
                        <span class="is-clickable" @onclick='() => UpdateDisplayMode(PopoutDisplayMode.Months)' @onclick:stopPropagation="true">@PopoutValue.ToString("MMMM")</span>
                        <span class="is-clickable has-text-weight-bold" @onclick='() => UpdateDisplayMode(PopoutDisplayMode.Years)' @onclick:stopPropagation="true">@PopoutValue.ToString("yyyy")</span>
                    </div>
                    <button type="button" class="button is-small is-rounded" @onclick='() => UpdatePopoutValue(true)' disabled='@(DisplayMode != PopoutDisplayMode.Calendar)'>
                        <span class="material-icons icon">arrow_forward</span>
                    </button>
                </div>
                <div class="datepicker-body">
                    <div class='@(DisplayMode == PopoutDisplayMode.Calendar ? "datepicker-dates is-active" : "datepicker-dates")'>
                        <div class="datepicker-weekdays">
                            @for (var date = DateTime.Today.GetPreviousWeekday(StartOfWeek); date < DateTime.Today.GetPreviousWeekday(StartOfWeek).AddDays(7); date = date.AddDays(1))
                            {
                                <div class="datepicker-date">@date.ToString("ddd")</div>
                            }
                        </div>
                        <div class="datepicker-days">
                            @foreach (var date in GetCalendarDates())
                            {
                                <div class='@(PopoutValue.Month == date.Month ? "datepicker-date is-current-month" : "datepicker-date")'>
                                    @if (Options.HasFlag(InputDateTimeOptions.CloseOnDateClicked))
                                    {
                                        <button type="button" class='@(PopoutValue.Date == date.Date ? "date-item is-active" : "date-item")' @onclick='() => ClosePopout(true, value: date.Add(PopoutValue.TimeOfDay))'>@date.ToString("dd")</button>
                                    }
                                    else
                                    {
                                        <button type="button" class='@(PopoutValue.Date == date.Date ? "date-item is-active" : "date-item")' @onclick='() => UpdatePopoutValue(date.Year, date.Month, date.Day)'>@date.ToString("dd")</button>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                    <div class='@(DisplayMode == PopoutDisplayMode.Months ? "datepicker-months is-active" : "datepicker-months")'>
                        @foreach (var month in GetCalendarMonths())
                        {
                            <div class='@(PopoutValue.Month == month.Month ? "datepicker-month is-active" : "datepicker-month")' @onclick='() => OnMonthSelected(month.Month)'>@month.ToString("MMM")</div>
                        }
                    </div>
                    <div class='@(DisplayMode == PopoutDisplayMode.Years ? "datepicker-years is-active" : "datepicker-years")'>
                        @foreach (var year in Enumerable.Range(DateTime.Today.Year - PopoutYearRange, PopoutYearRange * 2).OrderByDescending(x => x))
                        {
                            <div class='@(PopoutValue.Year == year ? "datepicker-year is-active" : "datepicker-year")' @onclick='() => OnYearSelected(year)'>@year</div>
                        }
                    </div>
                </div>
            </div>
        }

        @if (Options.HasAnyFlag(InputDateTimeOptions.ShowHours | InputDateTimeOptions.ShowMinutes | InputDateTimeOptions.ShowSeconds))
        {
            <div class="columns has-background-primary has-text-white m-0 px-0 py-1">
                @if (Options.HasFlag(InputDateTimeOptions.ShowHours))
                {
                    <span class="column p-0 has-text-centered">Hours</span>
                }
                @if (Options.HasFlag(InputDateTimeOptions.ShowMinutes))
                {
                    <span class="column p-0 has-text-centered">Minutes</span>
                }
                @if (Options.HasFlag(InputDateTimeOptions.ShowSeconds))
                {
                    <span class="column p-0 has-text-centered">Seconds</span>
                }
            </div>

            <div class="timepicker">
                <div class="timepicker-start">
                    @if (Options.HasFlag(InputDateTimeOptions.ShowHours))
                    {
                        <div class="timepicker-hours">
                            <span class="timepicker-next material-icons" @onclick='() => UpdatePopoutValue(TimeSpan.FromHours(StepHours))'>arrow_upward</span>
                            <div class="timepicker-input">
                                <input type="number">
                                <div class="timepicker-input-number">
                                    <span>@PopoutValue.ToString("HH")</span>
                                </div>
                            </div>
                            <span class="timepicker-previous material-icons" @onclick='() => UpdatePopoutValue(TimeSpan.FromHours(-StepHours))'>arrow_downward</span>
                        </div>
                        @if (Options.HasFlag(InputDateTimeOptions.ShowMinutes))
                        {
                            <div class="timepicker-time-divider">:</div>
                        }
                    }
                    @if (Options.HasFlag(InputDateTimeOptions.ShowMinutes))
                    {
                        <div class="timepicker-minutes">
                            <span class="timepicker-next material-icons" @onclick='() => UpdatePopoutValue(TimeSpan.FromMinutes(StepMinutes))'>arrow_upward</span>
                            <div class="timepicker-input">
                                <input type="number">
                                <div class="timepicker-input-number">
                                    <span>@PopoutValue.ToString("mm")</span>
                                </div>
                            </div>
                            <span class="timepicker-previous material-icons" @onclick='() => UpdatePopoutValue(TimeSpan.FromMinutes(-StepMinutes))'>arrow_downward</span>
                        </div>
                        @if (Options.HasFlag(InputDateTimeOptions.ShowSeconds))
                        {
                            <div class="timepicker-time-divider">:</div>
                        }
                    }
                    @if (Options.HasFlag(InputDateTimeOptions.ShowSeconds))
                    {
                        <div class="timepicker-seconds">
                            <span class="timepicker-next material-icons" @onclick='() => UpdatePopoutValue(TimeSpan.FromSeconds(StepSeconds))'>arrow_upward</span>
                            <div class="timepicker-input">
                                <input type="number">
                                <div class="timepicker-input-number">
                                    <span>@PopoutValue.ToString("ss")</span>
                                </div>
                            </div>
                            <span class="timepicker-previous material-icons" @onclick='() => UpdatePopoutValue(TimeSpan.FromSeconds(-StepSeconds))'>arrow_downward</span>
                        </div>
                    }
                </div>
            </div>
        }

        <div class="datetimepicker-footer">
            @if (Options.HasFlag(InputDateTimeOptions.ShowAcceptButton) || Options.HasFlag(InputDateTimeOptions.UpdateOnPopoutChange) == false)
            {
                <button type="button" class="button is-small is-fullwidth is-success" @onclick='() => ClosePopout(true)'>
                    Accept
                </button>
            }
            @if (Options.HasFlag(InputDateTimeOptions.ShowNowButton))
            {
                if (Options.HasAnyFlag(InputDateTimeOptions.ShowHours | InputDateTimeOptions.ShowMinutes | InputDateTimeOptions.ShowSeconds))
                {
                    <button type="button" class="button is-small is-fullwidth is-warning" @onclick='() => ClosePopout(true, value: DateTime.Now)'>
                        Now
                    </button>
                }
                else
                {
                    <button type="button" class="button is-small is-fullwidth is-warning" @onclick='() => ClosePopout(true, value: DateTime.Today)'>
                        Today
                    </button>
                }
            }
            @if (Options.HasFlag(InputDateTimeOptions.ShowResetButton))
            {
                <button type="button" class="button is-small is-fullwidth is-danger" @onclick='() => ClosePopout(reset: true)'>
                    Reset
                </button>
            }
            @if (Options.HasFlag(InputDateTimeOptions.ShowCancelButton))
            {
                <button type="button" class="button is-small is-fullwidth" @onclick='() => ClosePopout()'>
                    Cancel
                </button>
            }
        </div>
    </div>

    @if (Options.HasFlag(InputDateTimeOptions.ShowFullValueBelow) && Value != null)
    {
        <div class="tag is-success mt-1">@GetFullDisplayValue()</div>
    }
</div>
