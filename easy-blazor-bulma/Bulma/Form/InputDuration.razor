@namespace easy_blazor_bulma
@typeparam TValue
@inherits InputBase<TValue>

<div class="datetimepicker-parent">
    <input type="text" class="@MainCssClass" value='@CurrentValueAsString' onfocusin="this.select();"
        @onchange='OnChange'
        @onclick='OpenPopout'
        @onfocus='OpenPopout'
        @onkeydown='CheckKeyPress'
        @ref=Element
        @attributes='AdditionalAttributes.GetFilteredAttributes(Filter)' />

    @if (string.IsNullOrWhiteSpace(Icon) == false)
    {
        <span class="@IconCssClass">@Icon</span>
    }

    @if (Options.HasFlag(InputDurationOptions.ShowResetButton) && string.IsNullOrWhiteSpace(ResetIcon) == false && AdditionalAttributes.IsDisabled() == false)
    {
        <span class="material-icons icon is-right is-clickable" @onclick='() => ResetButtonHandler()' @onclick:stopPropagation="true">
            @ResetIcon
        </span>
    }

    <div class='@TimePickerCssClass'>
        @if (Options.HasFlag(InputDurationOptions.ClickPopout))
        {
            <div class="datetimepicker-background" @onclick='() => ClosePopout()'></div>
        }

        <div class="columns has-background-primary has-text-white m-0 px-0 py-1">
            @if (Options.HasFlag(InputDurationOptions.ShowDays))
            {
                <span class="column p-0 has-text-centered">Days</span>
            }
            @if (Options.HasFlag(InputDurationOptions.ShowHours))
            {
                <span class="column p-0 has-text-centered">Hours</span>
            }
            @if (Options.HasFlag(InputDurationOptions.ShowMinutes))
            {
                <span class="column p-0 has-text-centered">Minutes</span>
            }
            @if (Options.HasFlag(InputDurationOptions.ShowSeconds))
            {
                <span class="column p-0 has-text-centered">Seconds</span>
            }
        </div>

        <div class="timepicker">
            <div class="timepicker-start">
                @if (Options.HasFlag(InputDurationOptions.ShowDays))
                {
                    <div class="timepicker-days">
                        <span class="timepicker-next material-icons" @onclick='() => UpdatePopoutValue(TimeSpan.FromDays(StepDays))'>arrow_upward</span>
                        <div class="timepicker-input">
                            <input type="number">
                            <div class="timepicker-input-number">
                                <span>@(PopoutValue < TimeSpan.Zero ? "-" : "")</span>
                                <span>@PopoutValue.ToString("%d")</span>
                            </div>
                        </div>
                        <span class="timepicker-previous material-icons" @onclick='() => UpdatePopoutValue(TimeSpan.FromDays(-StepDays))'>arrow_downward</span>
                    </div>
                    @if (Options.HasFlag(InputDurationOptions.ShowHours))
                    {
                        <div class="timepicker-time-divider">.</div>
                    }
                }
                @if (Options.HasFlag(InputDurationOptions.ShowHours))
                {
                    <div class="timepicker-hours">
                        <span class="timepicker-next material-icons" @onclick='() => UpdatePopoutValue(TimeSpan.FromHours(StepHours))'>arrow_upward</span>
                        <div class="timepicker-input">
                            <input type="number">
                            <div class="timepicker-input-number">
                                @if (Options.HasFlag(InputDurationOptions.DisplayDaysAsHours))
                                {
                                    <span>@(PopoutValue < TimeSpan.Zero ? "-" : "")</span>
                                    <span>@(PopoutValue < TimeSpan.Zero ? Math.Abs((int)Math.Ceiling(PopoutValue.TotalHours)) : (int)Math.Floor(PopoutValue.TotalHours))</span>
                                }
                                else
                                {
                                    <span>@PopoutValue.ToString("hh")</span>
                                }
                            </div>
                        </div>
                        <span class="timepicker-previous material-icons" @onclick='() => UpdatePopoutValue(TimeSpan.FromHours(-StepHours))'>arrow_downward</span>
                    </div>
                    @if (Options.HasFlag(InputDurationOptions.ShowMinutes))
                    {
                        <div class="timepicker-time-divider">:</div>
                    }
                }
                @if (Options.HasFlag(InputDurationOptions.ShowMinutes))
                {
                    <div class="timepicker-minutes">
                        <span class="timepicker-next material-icons" @onclick='() => UpdatePopoutValue(TimeSpan.FromMinutes(StepMinutes))'>arrow_upward</span>
                        <div class="timepicker-input">
                            <input type="number">
                            <div class="timepicker-input-number">
                                @if (Options.HasFlag(InputDurationOptions.DisplayHoursAsMinutes))
                                {
                                    <span>@(PopoutValue < TimeSpan.Zero ? "-" : "")</span>
                                    <span>@(PopoutValue < TimeSpan.Zero ? Math.Abs((int)Math.Ceiling(PopoutValue.TotalMinutes)) : (int)Math.Floor(PopoutValue.TotalMinutes))</span>
                                }
                                else
                                {
                                    <span>@PopoutValue.ToString("mm")</span>
                                }
                            </div>
                        </div>
                        <span class="timepicker-previous material-icons" @onclick='() => UpdatePopoutValue(TimeSpan.FromMinutes(-StepMinutes))'>arrow_downward</span>
                    </div>
                    @if (Options.HasFlag(InputDurationOptions.ShowSeconds))
                    {
                        <div class="timepicker-time-divider">:</div>
                    }
                }
                @if (Options.HasFlag(InputDurationOptions.ShowSeconds))
                {
                    <div class="timepicker-seconds">
                        <span class="timepicker-next material-icons" @onclick='() => UpdatePopoutValue(TimeSpan.FromSeconds(StepSeconds))'>arrow_upward</span>
                        <div class="timepicker-input">
                            <input type="number">
                            <div class="timepicker-input-number">
                                @if (Options.HasFlag(InputDurationOptions.DisplayMinutesAsSeconds))
                                {
                                    <span>@(PopoutValue < TimeSpan.Zero ? "-" : "")</span>
                                    <span>@(PopoutValue < TimeSpan.Zero ? Math.Abs((int)Math.Ceiling(PopoutValue.TotalSeconds)) : (int)Math.Floor(PopoutValue.TotalSeconds))</span>
                                }
                                else
                                {
                                    <span>@PopoutValue.ToString("ss")</span>
                                }
                            </div>
                        </div>
                        <span class="timepicker-previous material-icons" @onclick='() => UpdatePopoutValue(TimeSpan.FromSeconds(-StepSeconds))'>arrow_downward</span>
                    </div>
                }
            </div>
        </div>

        <div class="datetimepicker-footer">
            @if (Options.HasFlag(InputDurationOptions.ShowAcceptButton) || Options.HasFlag(InputDurationOptions.UpdateOnPopoutChange) == false)
            {
                <button type="button" class="button is-small is-fullwidth is-success" @onclick='() => ClosePopout(true)'>
                    Accept
                </button>
            }
            @if (Options.HasFlag(InputDurationOptions.ShowResetButton))
            {
                <button type="button" class="button is-small is-fullwidth is-danger" @onclick='() => ClosePopout(reset: true)'>
                    Reset
                </button>
            }
            @if (Options.HasFlag(InputDurationOptions.ShowCancelButton))
            {
                <button type="button" class="button is-small is-fullwidth" @onclick='() => ClosePopout()'>
                    Cancel
                </button>
            }
        </div>
    </div>
</div>
