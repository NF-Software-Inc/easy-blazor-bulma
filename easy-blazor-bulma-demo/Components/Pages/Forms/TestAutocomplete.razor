@using System.ComponentModel.DataAnnotations

@page "/inputAutocomplete"
@inherits ComponentBase

<TitleBlock Title="Input Autocomplete Test" />

<div class="columns p-3">
	<div class="column is-4">
		<Message Title="Information" Color="BulmaColors.Cyan">
			<p class="block">Note that the Input Autocomplete component supports keyboard navigation using the following keys:</p>
			<div class="content">
				<ul class="content">
					<li>Up Arrow</li>
					<li>Down Arrow</li>
					<li>Left Arrow</li>
					<li>Right Arrow</li>
					<li>Tab</li>
					<li>Enter</li>
					<li>Esc</li>
				</ul>
			</div>
		</Message>

		<Message Title="Usage" Color="BulmaColors.Cyan">
			<p class="block">The first input displays a generic implementation.</p>
			<p class="block">The second input displays a more customized implementation. By using the OnItemsRequested method, the collection can be filtered before the value gets changed. Additionally, typing More will add a new element to the list and typing Less will remove an element from the list.</p>
		</Message>
	</div>
	<div class="column is-8">
		<EditForm Model="InputModel">
			<div class="field">
				<Label For="() => InputModel.SelectedItem1" TooltipMode="TooltipDisplayMode" />
				<div class="control has-icons-left is-expanded">
					<InputAutocomplete dropdown-class="is-fullwidth" @bind-Value="InputModel.SelectedItem1" DisplayValue='x => x.Name' Items="AllItems" IsNullable=false />
				</div>
			</div>
			<div class="field">
				<Label For="() => InputModel.SelectedItem2" TooltipMode="TooltipDisplayMode" />
				<div class="control has-icons-left is-expanded">
					<InputAutocomplete dropdown-class="is-fullwidth" @bind-Value="InputModel.SelectedItem2" DisplayValue='x => x?.Name' Items="GetAutocompleteItems()" OnItemsRequested=OnItemsRequested DisplayCount="5" Options="Options" />
				</div>
			</div>
		</EditForm>

		<Message class="mt-3" Title="New Hires" Color="BulmaColors.Green">
			<div class="columns">
				<div class="column">
					<p class="block">The person to be hired for the Janitor position is:</p>
					<div class="content">
						<ul>
							<li>Name: @InputModel.SelectedItem1.Name</li>
							<li>Age: @InputModel.SelectedItem1.Age</li>
							<li>Profession: @InputModel.SelectedItem1.Position</li>
						</ul>
					</div>
				</div>
				<div class="column">
					<p class="block">The person to be hired for the Accountant position is:</p>
					<div class="content">
						<ul>
							<li>Name: @InputModel.SelectedItem2?.Name</li>
							<li>Age: @InputModel.SelectedItem2?.Age</li>
							<li>Profession: @InputModel.SelectedItem2?.Position</li>
						</ul>
					</div>
				</div>
			</div>
		</Message>
	</div>
</div>

@code {
	private readonly PageModel InputModel = new()
	{
		SelectedItem1 = AllItems[2]
	};

	private readonly TooltipOptions TooltipDisplayMode = TooltipOptions.Right | TooltipOptions.HasArrow | TooltipOptions.Multiline;
	private readonly InputAutocompleteOptions Options = InputAutocompleteOptions.TypePopout | InputAutocompleteOptions.PopoutTop | InputAutocompleteOptions.UseAutomaticStatusColors;
	private string? Filter;

	private static readonly List<DemoAutocomplete> AllItems =
	[
		new DemoAutocomplete { Id = 1, Name = "Jimbo Moneybags", Age = 30, Position = "Accountant" },
		new DemoAutocomplete { Id = 2, Name = "Suzy Goldenfold", Age = 18, Position = "Accountant" },
		new DemoAutocomplete { Id = 3, Name = "Sal Mopnbucket", Age = 44, Position = "Janitor" },
		new DemoAutocomplete { Id = 4, Name = "Jill Broomhandel", Age = 61, Position = "Janitor" },
		new DemoAutocomplete { Id = 5, Name = "Reggie Cashonlee", Age = 23, Position = "Accountant" },
		new DemoAutocomplete { Id = 6, Name = "Oldie Butagoodie", Age = 72, Position = "Janitor" },
		new DemoAutocomplete { Id = 7, Name = "Rickie Notapenny", Age = 56, Position = "Accountant" },
		new DemoAutocomplete { Id = 8, Name = "Cheryl McMillions", Age = 33, Position = "Accountant" },
		new DemoAutocomplete { Id = 9, Name = "Lindsay Spicnspan", Age = 46, Position = "Janitor" },
		new DemoAutocomplete { Id = 10, Name = "Bob Skidmarks-McNastypants", Age = 55, Position = "Janitor" },
		new DemoAutocomplete { Id = 11, Name = "Pat Waxon", Age = 24, Position = "Janitor" },
		new DemoAutocomplete { Id = 12, Name = "Melissa Taxevader", Age = 36, Position = "Accountant" },
		new DemoAutocomplete { Id = 13, Name = "Larry Robberson", Age = 47, Position = "Accountant" },
		new DemoAutocomplete { Id = 14, Name = "Pat Waxoff", Age = 19, Position = "Janitor" },
		new DemoAutocomplete { Id = 15, Name = "Betty Terletson", Age = 20, Position = "Janitor" }
	];

	private IEnumerable<DemoAutocomplete> GetAutocompleteItems()
	{
		if (string.IsNullOrWhiteSpace(Filter) == false)
			return AllItems.Where(x => x.Position == "Accountant" && x.Name.StartsWith(Filter, StringComparison.OrdinalIgnoreCase));
		else
			return AllItems.Where(x => x.Position == "Accountant");
	}

	private async Task OnItemsRequested(string? value)
	{
		Filter = value;

		if (value != null && value.Equals("More", StringComparison.OrdinalIgnoreCase))
		{
			AllItems.Add(new DemoAutocomplete { Id = AllItems.Max(x => x.Id) + 1, Name = "Dupie Duplicado", Age = 99, Position = "Accountant" });
		}
		else if (value != null && value.Equals("Less", StringComparison.OrdinalIgnoreCase))
		{
			var remove = AllItems.FirstOrDefault(x => x.Position == "Accountant");

			if (remove != null)
				AllItems.Remove(remove);
		}

		StateHasChanged();
	}

	private class PageModel
	{
		[Display(Name = "Janitor Applicant", Description = "Please type the name of the applicant to hire for the Janitor position.")]
		public DemoAutocomplete SelectedItem1 { get; set; }

		[Display(Name = "Accountant Applicant", Description = "Please type the name of the applicant to hire for the Accountant position.")]
		public DemoAutocomplete? SelectedItem2 { get; set; }
	}

	private class DemoAutocomplete
	{
		public int Id { get; set; }

		public string Name { get; set; }

		public int Age { get; set; }

		public string Position { get; set; }
	}
}
